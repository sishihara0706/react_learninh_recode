モダンJavaScriptで必要なもの
    const,letでの宣言
        
        var変数は上書き可能
        var変数は再宣言可能
        JavaScriptのルールでは再宣言してもエラーにはならないが、意図しないところで変数を再宣言してバグが出ていた
        そこでconst,letがES6で追加された.
        ・varは上書きも、再宣言もできる
        ・letは上書きはできるが、再宣言できない
        ・constは上書きも、再宣言もできない
        ・constで定義したオブジェクトはプロパティの変更が可能
        例)
            const val4 = {
                name: "ishihara",
                age: 26
            }
            console.log(val4);
            
            val4.name = "satoshi"
            val4.age = 27;
            val4.address = "Nagasaki";
            console.log("constで定義したオブジェクトであればプロパティの変更が可能");
            console.log(val4);

        constで定義した配列はプロパティの変更が可能
        例)
            const val5 = ["dog", "cat"];
            console.log(val5);
            val5[0] = "bird";
            val5.push("monkey");
            console.log(val5);

        Reactではconstでの変数宣言をよく使う！
            
    テンプレート文字列
        // 従来の記法
        const messasge1 = "私の名前は" + name + "です。年齢は" + age + "です。";
        console.log(messasge1);

        // テンプレート文字列を用いる方法
        const messasge2 = `私の名前は${name}です。年齢は${age}です。`;
        console.log(messasge1);

    アロー関数(まあ重要)
        基本形
        const func2 = (str) => {
           return str;
        }

        引数が一つの場合、()を省略できる
        const func3 = str => {
           return str;
        }

        関数の中身が、returnのみの時、{}とreturnを省略できる。
        const func4 = str => str;

         ↑でオブジェクトを返すこともできる（これはアロー関数の書き方を知らないとわからないところ）
        const func5 = (num1, num2) => ({
            hoge: num1,
            fuga: num2
        });

         (JavaScriptは、省略したがる)

    分割代入
        オブジェクトの分割代入
        // 通常
        const message1 = `名前${myProfile.name}です。年齢は${myProfile.age}歳です。`
        console.log(message1);
        // 分割代入
        const { name, age } = myProfile;
        const message2 = `名前${name}です。年齢は${age}歳です。`
        console.log(message2);

        Reactでもよく使う。

        配列の分割代入
        // 通常
        const myProfile2 = [ "Satoshi", 26 ];
        const message3 = `名前${myProfile2[0]}です。年齢は${myProfile2[1]}歳です。`
        // 配列の分割代入
        const [ name1, age1 ] = myProfile2;
        const message4 = `名前${name1}です。年齢は${age1}歳です。`
        console.log(message3);

    デフォルト値
        const sayHello = (name) => console.log(`こんにちは！${name}さん!`);
        sayHello("satoshi");
        sayHello(); //undefinedと表示されてしまう。
        関数に引数を渡さずに実行すると、変数に何も設定されていない状態になる。からの変数内では"undefined"が展開されてしまうため、

        const sayHello2 = (name = "ゲスト") => console.log(`こんにちは！${name}さん!`);
        sayHello("satoshi");
        sayHello(); //ゲストと表示される
        →このように書くことで、値が設定されていない場合、関数定義時に設定した文字列が表示される。

        以下の場合に使える
        ・関数の引数
        ・オブジェクトの分割代入

        const { age, name = "ゲスト" } = myProfile;
        console.log(age);
        console.log(name);

    オブジェクトの省略記法（よく出てくる。知らないと読めない。）
        // オブジェクトの省略記法
        // // オブジェクトのプロパティの名前と代入する変数名が同じ場合、以下のように書ける
        const name = "satoshi";
        const age = 26;

        const myProfile = {
            name,
            age
        }
        // const myProfile = { name, age }; のように一行で書かれていることもあるため、分割代入と間違える可能性がある。

    スプレッド構文
        // 1.配列の展開
        const arr1 = [1, 2];
        console.log(arr1);
        console.log(...arr1); //配列展開

        // 以下の場合に用いられる
        const sumFunc = (num1, num2) => console.log(num1 + num2);

        sumFunc(arr1[0], arr1[1]);
        sumFunc(...arr1); //上と同じ処理になる

        // 2.まとめて受け取ることもできる
        const arr2 = [1, 2, 3, 4, 5];
        const [ num1, num2, ...arr3] = arr2; //...arr3で3個目以降を配列で受け取る
        console.log(num1);
        console.log(num2);
        console.log(arr3);

